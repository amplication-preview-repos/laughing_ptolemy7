/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BulkMessage as PrismaBulkMessage } from "@prisma/client";

export class BulkMessageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BulkMessageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bulkMessage.count(args);
  }

  async bulkMessages(
    args: Prisma.BulkMessageFindManyArgs
  ): Promise<PrismaBulkMessage[]> {
    return this.prisma.bulkMessage.findMany(args);
  }
  async bulkMessage(
    args: Prisma.BulkMessageFindUniqueArgs
  ): Promise<PrismaBulkMessage | null> {
    return this.prisma.bulkMessage.findUnique(args);
  }
  async createBulkMessage(
    args: Prisma.BulkMessageCreateArgs
  ): Promise<PrismaBulkMessage> {
    return this.prisma.bulkMessage.create(args);
  }
  async updateBulkMessage(
    args: Prisma.BulkMessageUpdateArgs
  ): Promise<PrismaBulkMessage> {
    return this.prisma.bulkMessage.update(args);
  }
  async deleteBulkMessage(
    args: Prisma.BulkMessageDeleteArgs
  ): Promise<PrismaBulkMessage> {
    return this.prisma.bulkMessage.delete(args);
  }
}
