/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BulkMessage } from "./BulkMessage";
import { BulkMessageCountArgs } from "./BulkMessageCountArgs";
import { BulkMessageFindManyArgs } from "./BulkMessageFindManyArgs";
import { BulkMessageFindUniqueArgs } from "./BulkMessageFindUniqueArgs";
import { CreateBulkMessageArgs } from "./CreateBulkMessageArgs";
import { UpdateBulkMessageArgs } from "./UpdateBulkMessageArgs";
import { DeleteBulkMessageArgs } from "./DeleteBulkMessageArgs";
import { BulkMessageService } from "../bulkMessage.service";
@graphql.Resolver(() => BulkMessage)
export class BulkMessageResolverBase {
  constructor(protected readonly service: BulkMessageService) {}

  async _bulkMessagesMeta(
    @graphql.Args() args: BulkMessageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BulkMessage])
  async bulkMessages(
    @graphql.Args() args: BulkMessageFindManyArgs
  ): Promise<BulkMessage[]> {
    return this.service.bulkMessages(args);
  }

  @graphql.Query(() => BulkMessage, { nullable: true })
  async bulkMessage(
    @graphql.Args() args: BulkMessageFindUniqueArgs
  ): Promise<BulkMessage | null> {
    const result = await this.service.bulkMessage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BulkMessage)
  async createBulkMessage(
    @graphql.Args() args: CreateBulkMessageArgs
  ): Promise<BulkMessage> {
    return await this.service.createBulkMessage({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BulkMessage)
  async updateBulkMessage(
    @graphql.Args() args: UpdateBulkMessageArgs
  ): Promise<BulkMessage | null> {
    try {
      return await this.service.updateBulkMessage({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BulkMessage)
  async deleteBulkMessage(
    @graphql.Args() args: DeleteBulkMessageArgs
  ): Promise<BulkMessage | null> {
    try {
      return await this.service.deleteBulkMessage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
