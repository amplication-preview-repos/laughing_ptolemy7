/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BulkMessageService } from "../bulkMessage.service";
import { BulkMessageCreateInput } from "./BulkMessageCreateInput";
import { BulkMessage } from "./BulkMessage";
import { BulkMessageFindManyArgs } from "./BulkMessageFindManyArgs";
import { BulkMessageWhereUniqueInput } from "./BulkMessageWhereUniqueInput";
import { BulkMessageUpdateInput } from "./BulkMessageUpdateInput";

export class BulkMessageControllerBase {
  constructor(protected readonly service: BulkMessageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BulkMessage })
  async createBulkMessage(
    @common.Body() data: BulkMessageCreateInput
  ): Promise<BulkMessage> {
    return await this.service.createBulkMessage({
      data: data,
      select: {
        content: true,
        createdAt: true,
        id: true,
        sender: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BulkMessage] })
  @ApiNestedQuery(BulkMessageFindManyArgs)
  async bulkMessages(@common.Req() request: Request): Promise<BulkMessage[]> {
    const args = plainToClass(BulkMessageFindManyArgs, request.query);
    return this.service.bulkMessages({
      ...args,
      select: {
        content: true,
        createdAt: true,
        id: true,
        sender: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BulkMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bulkMessage(
    @common.Param() params: BulkMessageWhereUniqueInput
  ): Promise<BulkMessage | null> {
    const result = await this.service.bulkMessage({
      where: params,
      select: {
        content: true,
        createdAt: true,
        id: true,
        sender: true,
        timestamp: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BulkMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBulkMessage(
    @common.Param() params: BulkMessageWhereUniqueInput,
    @common.Body() data: BulkMessageUpdateInput
  ): Promise<BulkMessage | null> {
    try {
      return await this.service.updateBulkMessage({
        where: params,
        data: data,
        select: {
          content: true,
          createdAt: true,
          id: true,
          sender: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BulkMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBulkMessage(
    @common.Param() params: BulkMessageWhereUniqueInput
  ): Promise<BulkMessage | null> {
    try {
      return await this.service.deleteBulkMessage({
        where: params,
        select: {
          content: true,
          createdAt: true,
          id: true,
          sender: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
